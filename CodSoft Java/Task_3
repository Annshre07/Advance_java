import java.util.Scanner;

// Interface for Input
interface Input {
    String getUserInput();
}

// Interface for Output
interface Output {
    void print(String message);
}

// Bank Account with balance management
class BankAccount {
    private int balance;

    // Constructor to initialize balance
    BankAccount(int initialBalance) {
        balance = initialBalance;
    }

    // Method to get balance
    int getBalance() {
        return balance;
    }

    // Method to deposit amount
    void deposit(int amount) {
        balance += amount;
    }

    // Method to withdraw amount
    void withdraw(int amount) {
        balance -= amount;
    }
}

// Pin authentication class
class PinAuthentication {
    private String storedPin;

    // Constructor to initialize PIN (stored securely in real-world applications)
    PinAuthentication(String pin) {
        storedPin = pin;
    }

    // Method to authenticate user by PIN
    boolean authenticate(Input input) {
        System.out.print("Enter PIN: ");
        String enteredPin = input.getUserInput();
        return enteredPin.equals(storedPin);
    }
}

// ATM class that handles user interaction and transactions
class ATM {
    private BankAccount bankAccount;
    private PinAuthentication pinAuth;
    private Input input;
    private Output output;

    // Constructor to initialize ATM with dependencies
    ATM(BankAccount bankAccount, PinAuthentication pinAuth, Input input, Output output) {
        this.bankAccount = bankAccount;
        this.pinAuth = pinAuth;
        this.input = input;
        this.output = output;
    }

    // Method to start the ATM interaction
    void startATM() {
        if (pinAuth.authenticate(input)) {
            showMenu();
        } else {
            output.print("Authentication failed. Please try again.");
        }
    }

    // Method to show options to the user
    void showMenu() {
        output.print("Select an option:");
        output.print("1. Withdraw");
        output.print("2. Deposit");
        output.print("3. Check Balance");
        int option = Integer.parseInt(input.getUserInput());
        switch (option) {
            case 1:
                withdraw();
                break;
            case 2:
                deposit();
                break;
            case 3:
                checkBalance();
                break;
            default:
                output.print("Invalid option.");
                break;
        }
    }

    // Method for withdrawal
    void withdraw() {
        output.print("Enter amount to withdraw:");
        int amount = Integer.parseInt(input.getUserInput());
        if (bankAccount.getBalance() >= amount) {
            bankAccount.withdraw(amount);
            output.print("Withdrawal successful.");
        } else {
            output.print("Insufficient balance.");
        }
    }

    // Method for deposit
    void deposit() {
        output.print("Enter amount to deposit:");
        int amount = Integer.parseInt(input.getUserInput());
        bankAccount.deposit(amount);
        output.print("Deposit successful.");
    }

    // Method to check balance
    void checkBalance() {
        output.print("Your balance is: " + bankAccount.getBalance());
    }
}

// Concrete implementation of Input (console-based)
class ConsoleInput implements Input {
    private Scanner scanner = new Scanner(System.in);

    // Method to get user input from the console
    @Override
    public String getUserInput() {
        return scanner.nextLine();
    }
}

// Concrete implementation of Output (console-based)
class ConsoleOutput implements Output {
    // Method to print messages to the console
    @Override
    public void print(String message) {
        System.out.println(message);
    }
}

// Main class to run the ATM
public class Main {
    public static void main(String[] args) {
        // Initializing the system with dependencies
        BankAccount account = new BankAccount(1000);  // Initial balance of 1000
        PinAuthentication pinAuth = new PinAuthentication("1234");  // Set PIN as "1234"
        Input input = new ConsoleInput();  // Use console input
        Output output = new ConsoleOutput();  // Use console output
        
        // Create ATM instance and start it
        ATM atm = new ATM(account, pinAuth, input, output);
        atm.startATM();
    }
}
